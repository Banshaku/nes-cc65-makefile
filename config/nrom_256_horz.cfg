MEMORY {

    #######
    # Data related
    HEADER:		start = $0000, size = $0010, file = %O ,fill = yes;
    PRG: 		start = $8000, size = $7fc0, file = %O ,fill = yes, define = yes;
    DMC: 		start = $ffc0, size = $003a, file = %O, fill = yes, define = yes;
	VECTORS: 	start = $fffa, size = $0006, file = %O, fill = yes;
    CHR: 		start = $0000, size = $2000, file = %O, fill = yes;
    
    ########
    # Memory related
    ZP: 		start = $0000, size = $0100, type = rw, define = yes;
    HW_STACK:   start = $0100, size = $0100, define = yes;
    OAM:        start = $0200, size = $0100, define = yes;
    RAM:		start = $0300, size = $0500, define = yes;

	  # Use this definition instead if you going to use extra 8K RAM
	  # RAM: start = $6000, size = $2000, define = yes;
}

SEGMENTS {

    HEADER:      load = HEADER,         type = ro;
    STARTUP:     load = PRG,            type = ro,  define = yes;
    CODE:        load = PRG,            type = ro,  define = yes;
    SOUNDRV:     load = PRG,            type = ro,  define = yes;
    RODATA:      load = PRG,            type = ro,  define = yes;
    ########
    # This one is required for copydata, to initialize variables. Could be removed
    # later if I don't initialize my variable with specific values
    DATA:        load = PRG, run = RAM, type = rw,  define = yes;
    VECTORS:     load = VECTORS,        type = ro;
	# Not used for now
    SAMPLES:     load = DMC,            type = ro;
    CHARS:       load = CHR,            type = ro;
    OAM_BUFFER:  load = OAM,            type = bss, define = yes; 
    BSS:         load = RAM,            type = bss, define = yes;
    ZEROPAGE:    load = ZP,             type = zp;
    ##########
    # Location of famitone memory. For now shares the hardware stack
    SOUNDRV_RAM: load = HW_STACK,       type = bss, define = yes;
}

SYMBOLS {

	NES_MAPPER	  : type = weak, addrsize = zp, value = 0; 	    # mapper number
	NES_PRG_BANKS : type = weak, addrsize = zp, value = 2; 		# number of 16K PRG banks, change to 2 for NROM256
	NES_CHR_BANKS : type = weak, addrsize = zp, value = 1; 		# number of 8K CHR banks
	NES_MIRRORING : type = weak, addrsize = zp, value = 0; 		# 0 horizontal, 1 vertical, 8 four screen
}